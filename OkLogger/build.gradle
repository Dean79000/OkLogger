group 'fr.cyberdean'
version '1.0-SNAPSHOT'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.jsoup:jsoup:1.9.2'
  }
}

apply plugin: 'java'
apply plugin: 'jacoco'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  jcenter()
}

dependencies {
  compile 'com.squareup.okio:okio:1.9.0'
  testCompile group: 'junit', name: 'junit', version: '4.11'
}

jacoco {
  reportsDir = file("$buildDir/jacoco/reports")
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.enabled true
  }
}

test {
  testLogging {
    showStandardStreams = true
  }
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpFile = file("$buildDir/jacoco/classpathdumps")
  }
  systemProperty 'https.proptocols', 'TLSv1.2'
  doLast {
    File html = reports.html.entryPoint
    def doc = org.jsoup.Jsoup.parse(html, 'UTF-8')
    int total = doc.select('#tests > .counter').text() as int
    int failed = doc.select('#failures > .counter').text() as int

    /*File covFile = file("$buildDir/jacoco/reports/test/html/index.html")
    def docCov = org.jsoup.Jsoup.parse(covFile, 'UTF-8')
    int cov = docCov.select('#coveragetable > tfoot > tr > .ctr2').first().text().replaceAll("[^\\d.]", "") as int
    String covColor = cov > 90 ? 'green' : (cov < 50 ? 'yellow' : 'red')*/

    def readme = file('../README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-_${text}-${color}.png?style=flat"
    }
    String label = 'Tests'
    String text = "${total-failed}/${total}"
    String color = failed == 0 ? 'green' : (failed < 3 ? 'yellow' : 'red')
    String v = project.version

    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter',v,'6688ff')}) &#x2003; ![jcenter](${badge(label,text,color)})" //&#x2003; ![jcenter](${badge('Coveradge','${cov} %', covColor)})
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
  finalizedBy tasks.jacocoTestReport
//  outputs.upToDateWhen { false }
}